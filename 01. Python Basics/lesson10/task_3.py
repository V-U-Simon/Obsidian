"""
3. Осуществить программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс «Клетка».
В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число).
В классе должны быть реализованы методы перегрузки арифметических операторов:
сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__floordiv__ __truediv__()).
Эти методы должны применяться только к клеткам и выполнять увеличение, уменьшение,
умножение и округление до целого числа деления клеток, соответственно.

Сложение.
Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.

Вычитание.
Участвуют две клетки. Операцию необходимо выполнять, только если разность количества ячеек двух клеток больше нуля,
иначе выводить соответствующее сообщение.

Умножение.
Создаётся общая клетка из двух. Число ячеек общей клетки — произведение количества ячеек этих двух клеток.

Деление.
Создаётся общая клетка из двух.
Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.



В классе необходимо реализовать метод ma ke_order(), принимающий экземпляр класса и количество ячеек в ряду.
Этот метод позволяет организовать ячейки по рядам.
Метод должен возвращать строку вида 
*****\n
*****\n
*****..., 

где количество ячеек между \n равно переданному аргументу.
Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.

Например, количество ячеек клетки равняется 12, а количество ячеек в ряду — 5.
В этом случае метод make_order() вернёт строку: 
*****\n
*****\n
**

Или, количество ячеек клетки — 15, а количество ячеек в ряду равняется 5.
Тогда метод make_order() вернёт строку: 
*****\n
*****\n
*****.
"""

from __future__ import annotations


class Cell():
    def __init__(self, content: int):
        self.content = content

    def __str__(self):
        return str(self.content)

    def __add__(self, other: Cell):
        """Объединение двух клеток.
        При этом число ячеек общей клетки равняться сумме ячеек исходных двух клеток."""
        return Cell(self.content + other.content)

    def __sub__(self, other):
        """Вычитание.
        Участвуют две клетки.
        Только если разность количества ячеек двух клеток больше нуля,
        иначе выводить исключение."""
        if res := self.content - other.content:
            return res
        else:
            raise ArithmeticError("Невозможно вычеть, т.к. выче")

    def __mul__(self, other):
        """Создаётся общая клетка из двух.
        Число ячеек общей клетки — произведение количества ячеек этих двух клеток."""
        return Cell(self.content * other.content)

    def __floordiv__(self, other):
        """Создаётся общая клетка из двух.
        Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
        """
        return Cell(self.content // other.content)

    def __truediv__(self, other):
        return Cell(self.content // other.content)

    def make_order(self, count=5):
        for _ in range(self.content // count):
            print('*' * count)
        print('*' * (self.content % count))


class OtherCell:
    content = 0.9


if __name__ == '__main__':
    crown = Cell(10)
    virus = Cell(5)

    print(crown + OtherCell())  # подсветка неверного класса в IDE
    print(crown + virus)
    print(crown - virus)
    print(virus - crown)
    print(crown * virus)
    print(crown / virus)
    print(crown // virus)
    crown.make_order(5)
    virus.make_order(3)
